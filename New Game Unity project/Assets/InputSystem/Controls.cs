//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Workbench"",
            ""id"": ""3db44fcb-5f32-469f-9c8f-76c24dcd61bd"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9b60cd50-d797-4318-9615-d0034367545f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f28aea2-aa8b-47ad-a1a0-43489d76644b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShootingRange"",
            ""id"": ""15566ce8-baa4-4696-ad57-e2e2270c7271"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""5acd2760-5f34-4e03-960a-c2c454b7af44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""c3317293-81d8-4a47-92b0-19cf65d5b0f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnlockCursor"",
                    ""type"": ""Button"",
                    ""id"": ""e06d2322-a67f-4ddb-9209-36dcfe067335"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scope"",
                    ""type"": ""Button"",
                    ""id"": ""04767a06-2707-488c-a261-865b13e10f6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b70fb64c-00b6-4f06-9eb2-91d3f5f93cc2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7242019c-2397-450b-9671-2a487062cafd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c9c6e02-afe2-4347-9ced-7f90f9185e74"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Scope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""008fc557-c2f4-4be9-bcd1-4004f5213bb7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""UnlockCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseLock"",
            ""id"": ""b9c18b6b-88ed-4290-99c7-a31a73859c20"",
            ""actions"": [
                {
                    ""name"": ""LockMouse"",
                    ""type"": ""Button"",
                    ""id"": ""956efde3-2d40-4f95-9572-49c705951044"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0518fdd-dd1f-4e49-b779-ed20fd2bccbf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""LockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2818a442-1a27-4dac-9008-2169c57628b4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""LockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse+Keyboard"",
            ""bindingGroup"": ""Mouse+Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Workbench
        m_Workbench = asset.FindActionMap("Workbench", throwIfNotFound: true);
        m_Workbench_Interact = m_Workbench.FindAction("Interact", throwIfNotFound: true);
        // ShootingRange
        m_ShootingRange = asset.FindActionMap("ShootingRange", throwIfNotFound: true);
        m_ShootingRange_Shoot = m_ShootingRange.FindAction("Shoot", throwIfNotFound: true);
        m_ShootingRange_Reload = m_ShootingRange.FindAction("Reload", throwIfNotFound: true);
        m_ShootingRange_UnlockCursor = m_ShootingRange.FindAction("UnlockCursor", throwIfNotFound: true);
        m_ShootingRange_Scope = m_ShootingRange.FindAction("Scope", throwIfNotFound: true);
        // MouseLock
        m_MouseLock = asset.FindActionMap("MouseLock", throwIfNotFound: true);
        m_MouseLock_LockMouse = m_MouseLock.FindAction("LockMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Workbench
    private readonly InputActionMap m_Workbench;
    private IWorkbenchActions m_WorkbenchActionsCallbackInterface;
    private readonly InputAction m_Workbench_Interact;
    public struct WorkbenchActions
    {
        private @Controls m_Wrapper;
        public WorkbenchActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Workbench_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Workbench; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorkbenchActions set) { return set.Get(); }
        public void SetCallbacks(IWorkbenchActions instance)
        {
            if (m_Wrapper.m_WorkbenchActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_WorkbenchActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_WorkbenchActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_WorkbenchActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_WorkbenchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public WorkbenchActions @Workbench => new WorkbenchActions(this);

    // ShootingRange
    private readonly InputActionMap m_ShootingRange;
    private IShootingRangeActions m_ShootingRangeActionsCallbackInterface;
    private readonly InputAction m_ShootingRange_Shoot;
    private readonly InputAction m_ShootingRange_Reload;
    private readonly InputAction m_ShootingRange_UnlockCursor;
    private readonly InputAction m_ShootingRange_Scope;
    public struct ShootingRangeActions
    {
        private @Controls m_Wrapper;
        public ShootingRangeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_ShootingRange_Shoot;
        public InputAction @Reload => m_Wrapper.m_ShootingRange_Reload;
        public InputAction @UnlockCursor => m_Wrapper.m_ShootingRange_UnlockCursor;
        public InputAction @Scope => m_Wrapper.m_ShootingRange_Scope;
        public InputActionMap Get() { return m_Wrapper.m_ShootingRange; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingRangeActions set) { return set.Get(); }
        public void SetCallbacks(IShootingRangeActions instance)
        {
            if (m_Wrapper.m_ShootingRangeActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Reload.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnReload;
                @UnlockCursor.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnUnlockCursor;
                @UnlockCursor.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnUnlockCursor;
                @UnlockCursor.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnUnlockCursor;
                @Scope.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnScope;
                @Scope.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnScope;
                @Scope.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnScope;
            }
            m_Wrapper.m_ShootingRangeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @UnlockCursor.started += instance.OnUnlockCursor;
                @UnlockCursor.performed += instance.OnUnlockCursor;
                @UnlockCursor.canceled += instance.OnUnlockCursor;
                @Scope.started += instance.OnScope;
                @Scope.performed += instance.OnScope;
                @Scope.canceled += instance.OnScope;
            }
        }
    }
    public ShootingRangeActions @ShootingRange => new ShootingRangeActions(this);

    // MouseLock
    private readonly InputActionMap m_MouseLock;
    private IMouseLockActions m_MouseLockActionsCallbackInterface;
    private readonly InputAction m_MouseLock_LockMouse;
    public struct MouseLockActions
    {
        private @Controls m_Wrapper;
        public MouseLockActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LockMouse => m_Wrapper.m_MouseLock_LockMouse;
        public InputActionMap Get() { return m_Wrapper.m_MouseLock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseLockActions set) { return set.Get(); }
        public void SetCallbacks(IMouseLockActions instance)
        {
            if (m_Wrapper.m_MouseLockActionsCallbackInterface != null)
            {
                @LockMouse.started -= m_Wrapper.m_MouseLockActionsCallbackInterface.OnLockMouse;
                @LockMouse.performed -= m_Wrapper.m_MouseLockActionsCallbackInterface.OnLockMouse;
                @LockMouse.canceled -= m_Wrapper.m_MouseLockActionsCallbackInterface.OnLockMouse;
            }
            m_Wrapper.m_MouseLockActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LockMouse.started += instance.OnLockMouse;
                @LockMouse.performed += instance.OnLockMouse;
                @LockMouse.canceled += instance.OnLockMouse;
            }
        }
    }
    public MouseLockActions @MouseLock => new MouseLockActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse+Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IWorkbenchActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IShootingRangeActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnUnlockCursor(InputAction.CallbackContext context);
        void OnScope(InputAction.CallbackContext context);
    }
    public interface IMouseLockActions
    {
        void OnLockMouse(InputAction.CallbackContext context);
    }
}
