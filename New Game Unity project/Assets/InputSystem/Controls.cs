//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Workbench"",
            ""id"": ""3db44fcb-5f32-469f-9c8f-76c24dcd61bd"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9b60cd50-d797-4318-9615-d0034367545f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f28aea2-aa8b-47ad-a1a0-43489d76644b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShootingRange"",
            ""id"": ""15566ce8-baa4-4696-ad57-e2e2270c7271"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""5acd2760-5f34-4e03-960a-c2c454b7af44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b70fb64c-00b6-4f06-9eb2-91d3f5f93cc2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse+Keyboard"",
            ""bindingGroup"": ""Mouse+Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Workbench
        m_Workbench = asset.FindActionMap("Workbench", throwIfNotFound: true);
        m_Workbench_Interact = m_Workbench.FindAction("Interact", throwIfNotFound: true);
        // ShootingRange
        m_ShootingRange = asset.FindActionMap("ShootingRange", throwIfNotFound: true);
        m_ShootingRange_Shoot = m_ShootingRange.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Workbench
    private readonly InputActionMap m_Workbench;
    private IWorkbenchActions m_WorkbenchActionsCallbackInterface;
    private readonly InputAction m_Workbench_Interact;
    public struct WorkbenchActions
    {
        private @Controls m_Wrapper;
        public WorkbenchActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Workbench_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Workbench; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorkbenchActions set) { return set.Get(); }
        public void SetCallbacks(IWorkbenchActions instance)
        {
            if (m_Wrapper.m_WorkbenchActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_WorkbenchActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_WorkbenchActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_WorkbenchActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_WorkbenchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public WorkbenchActions @Workbench => new WorkbenchActions(this);

    // ShootingRange
    private readonly InputActionMap m_ShootingRange;
    private IShootingRangeActions m_ShootingRangeActionsCallbackInterface;
    private readonly InputAction m_ShootingRange_Shoot;
    public struct ShootingRangeActions
    {
        private @Controls m_Wrapper;
        public ShootingRangeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_ShootingRange_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_ShootingRange; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingRangeActions set) { return set.Get(); }
        public void SetCallbacks(IShootingRangeActions instance)
        {
            if (m_Wrapper.m_ShootingRangeActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_ShootingRangeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public ShootingRangeActions @ShootingRange => new ShootingRangeActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse+Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IWorkbenchActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IShootingRangeActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
}
